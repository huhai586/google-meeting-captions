{"mappings":"AEEA;;GAEG;AACH;IACI,OAAO,EAAE,MAAM,CAAC;IAChB,aAAa,EAAE,MAAM,CAAC;IACtB,WAAW,EAAE,MAAM,CAAC;CACvB;AACD,+BAA+B,CAAC,CAAC,EAAE,QAAQ,KAAK,IAAI,CAAC;AACrD;;;;;GAKG;AACH,4BAA4B,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,KAAK,IAAI,CAAC;AAY9E,OAAO,MAAM,4BAA2B,WAAW,GAAG,IAErD,CAAA;AAwBD;;;;GAIG;AACH,OAAO,MAAM,WAAW,EAAE,oBAazB,CAAA;AAED,eAAe,WAAW,CAAC","sources":["src/src/debounce.ts","src/src/mutation-callback.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,"import mutationCallback from './mutation-callback';\n\n/**\n * Type definition for the captions receiver function.\n */\nexport interface Captions {\n    session: string;\n    activeSpeaker: string;\n    talkContent: string;\n}\nexport type captionsReceiver = (v: Captions) => void;\n/**\n * Type definition for the GetCaptionsInterface function.\n * @typedef {Function} GetCaptionsInterface\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\ntype GetCaptionsInterface = (cls: string, receiver: captionsReceiver) => void;\n\nconst getCaptionLang = () => {\n    const langs: Record<string, string> = {\n        'zh-cn': '字幕',\n        'en': 'Captions',\n    }\n    const htmlElement = document.querySelector('html');\n    const lang = htmlElement?.lang?.toLowerCase() || 'en';\n    return langs[lang] || 'Captions';\n}\n\nexport const getCaptionsContainer = (): HTMLElement | null => {\n    return document.querySelector<HTMLElement>('div[aria-label=\"' + getCaptionLang() + '\"]');\n}\n\n/**\n * Waits for the target element to be available and starts observing it for mutations.\n * @param cls\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nconst waitForObserving = (cls: string, receiver: captionsReceiver) => {\n    const targetElement = getCaptionsContainer();\n    if (targetElement) {\n        const observer = new MutationObserver(() => {\n            console.log('mutation observed');\n            mutationCallback(receiver);\n        });\n        observer.observe(targetElement, {\n            childList: true,\n            subtree: true,\n            characterData: true\n        });\n    } else {\n        setTimeout(() => {waitForObserving(cls, receiver)}, 1000);\n    }\n}\n\n/**\n * Type definition for the GetCaptionsInterface function.\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nexport const getCaptions: GetCaptionsInterface = (cls: string, receiver: captionsReceiver) => {\n    const readyGetCaptions = () => {\n        window.requestAnimationFrame(() => {\n            if (document.readyState === 'complete') {\n                console.log('document complete');\n                waitForObserving(cls, receiver);\n            } else {\n                readyGetCaptions()\n            }\n        })\n    };\n\n    readyGetCaptions();\n}\n\nexport default getCaptions;\n"],"names":[],"version":3,"file":"index.d.ts.map"}