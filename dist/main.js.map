{"mappings":";;;;;;;;;;;;;;;AEAA,MAAM,iCAAW,CAAC,IAAI;IAClB,IAAI;IACJ,OAAO,SAAU,GAAG,IAAI;QACpB,aAAa;QACb,QAAQ,WAAW;YACf,MAAM;QACV,GAAG;IACP;AACJ;IAEA,2CAAe;;;ADPf,MAAM,yCAAmB,IAAM,CAAA,GAAA,yCAAmB,IAAI,UAAU,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE;AACtF,MAAM,wCAAkB,IAAM,CAAA,GAAA,yCAAmB,IAAI,UAAU,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE;AAErF,IAAI,sCAAgB;AACpB,MAAM,0CAAmB,CAAC;AAC1B,MAAM,oCAAc;IAChB,WAAW;IACX,cAAc;AAClB;AAGA,MAAM,yCAAmB,CAAC;IACtB,MAAM,eAAe;IACrB,MAAM,mBAAmB,6CAAuB;IAChD,sCAAgB;IAEhB,IAAI,CAAC,cACD;IAGJ,IAAI,kBAAkB;QAClB,kCAAY,SAAS,GAAG,OAAO,IAAI,OAAO,OAAO,KAAK,mBAAmB;QACzE,kCAAY,YAAY,GAAG,GAAG,sBAAsB;QACpD,uCAAiB,CAAC,kCAAY,SAAS,CAAC,GAAG,EAAE;IACjD;IAEA,SAAS;QACL,SAAS,kCAAY,SAAS;QAC9B,eAAe;QACf,aAAa;IACjB;AAAE;IAEN,2CAAe,CAAA,GAAA,wCAAO,EAAE,wCAAkB;;;ADd1C,MAAM,uCAAiB;IACnB,MAAM,QAAQ;QACV,SAAS;QACT,MAAM;IACV;IACA,MAAM,OAAO,SAAS,aAAa,CAAC,QAAQ,IAAI,EAAE;IAClD,OAAO,KAAK,CAAC,KAAK,IAAI;AAC1B;AAEO,MAAM,4CAAuB;IAChC,OAAO,SAAS,aAAa,CAAC,qBAAqB,yCAAmB;AAC1E;AAEA;;;;CAIC,GACD,MAAM,yCAAmB,CAAC,KAAY;IAClC,MAAM,gBAAgB;IACtB,IAAI,eAAe;QACf,MAAM,WAAW,IAAI,iBAAiB;YAClC,QAAQ,GAAG,CAAC;YACZ,CAAA,GAAA,wCAAe,EAAE;QACrB;QACA,SAAS,OAAO,CAAC,eAAe;YAC5B,WAAW;YACX,SAAS;YACT,eAAe;QACnB;IACJ,OACI,WAAW;QAAO,uCAAiB,KAAK;IAAS,GAAG;AAE5D;AAOO,MAAM,4CAAqC,CAAC,KAAa;IAE5D,MAAM,mBAAmB;QACrB,OAAO,qBAAqB,CAAC;YACzB,IAAI,SAAS,UAAU,KAAK,YAAY;gBACpC,QAAQ,GAAG,CAAC;gBACZ,uCAAiB,KAAK;YAC1B,OACI;QAER;IACJ;IAEA;AAEJ;IAEA,2CAAe","sources":["src/index.ts","src/mutation-callback.ts","src/debounce.ts"],"sourcesContent":["import mutationCallback from './mutation-callback';\n\n/**\n * Type definition for the captions receiver function.\n */\nexport interface Captions {\n    session: string;\n    activeSpeaker: string;\n    talkContent: string;\n}\nexport type captionsReceiver = (v: Captions) => void;\n/**\n * Type definition for the GetCaptionsInterface function.\n * @typedef {Function} GetCaptionsInterface\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\ntype GetCaptionsInterface = (cls: string, receiver: captionsReceiver) => void;\n\n\n\nconst getCaptionLang = () => {\n    const langs = {\n        'zh-cn': '字幕',\n        'en': 'Captions',\n    }\n    const lang = document.querySelector('html').lang?.toLowerCase();\n    return langs[lang] || 'Captions';\n}\n\nexport const getCaptionsContainer = () => {\n    return document.querySelector('div[aria-label=\"' + getCaptionLang() + '\"]');\n}\n\n/**\n * Waits for the target element to be available and starts observing it for mutations.\n * @param cls\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nconst waitForObserving = (cls: string,receiver: captionsReceiver) => {\n    const targetElement = getCaptionsContainer();\n    if (targetElement) {\n        const observer = new MutationObserver(() => {\n            console.log('mutation observed');\n            mutationCallback(receiver);\n        });\n        observer.observe(targetElement, {\n            childList: true,\n            subtree: true,\n            characterData: true\n        });\n    } else {\n        setTimeout(() => {waitForObserving(cls, receiver)}, 1000);\n    }\n}\n\n/**\n * Type definition for the GetCaptionsInterface function.\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nexport const getCaptions : GetCaptionsInterface = (cls: string, receiver: captionsReceiver) => {\n\n    const readyGetCaptions = () => {\n        window.requestAnimationFrame(() => {\n            if (document.readyState === 'complete') {\n                console.log('document complete');\n                waitForObserving(cls, receiver);\n            } else {\n                readyGetCaptions()\n            }\n        })\n    };\n\n    readyGetCaptions();\n\n}\n\nexport default getCaptions;\n","import {captionsReceiver, getCaptionsContainer} from \"./index\";\r\nimport debounce from './debounce';\r\n\r\nconst getWhoIsSpeaking = () => getCaptionsContainer().childNodes?.[0]?.childNodes[0]?.textContent;\r\nconst getSpeakContent = () => getCaptionsContainer().childNodes?.[0]?.childNodes[1]?.textContent;\r\n\r\nlet whoIsSpeaking = '';\r\nconst sessionIdSpanHash= {};\r\nconst sessionInfo = {\r\n    sessionId: '',\r\n    sessionIndex: 0\r\n}\r\n\r\n\r\nconst mutationCallback = (receiver: captionsReceiver) => {\r\n    const speakContent = getSpeakContent();\r\n    const isNewOneSpeaking = getWhoIsSpeaking() !== whoIsSpeaking;\r\n    whoIsSpeaking = getWhoIsSpeaking();\r\n\r\n    if (!speakContent) {\r\n        return\r\n    }\r\n\r\n    if (isNewOneSpeaking) {\r\n        sessionInfo.sessionId = String(new Date().getTime()); // reset session id\r\n        sessionInfo.sessionIndex = 0; // reset session index\r\n        sessionIdSpanHash[sessionInfo.sessionId] = [];\r\n    }\r\n\r\n    receiver({\r\n        session: sessionInfo.sessionId,\r\n        activeSpeaker: whoIsSpeaking,\r\n        talkContent: speakContent\r\n    })};\r\n\r\nexport default debounce(mutationCallback, 300);\r\n","const debounce = (fn, delay) => {\r\n    let timer;\r\n    return function (...args) {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            fn(...args);\r\n        }, delay);\r\n    };\r\n}\r\n\r\nexport default debounce;\r\n"],"names":[],"version":3,"file":"main.js.map"}