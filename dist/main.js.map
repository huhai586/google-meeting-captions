{"mappings":";;;;;;;;;;;;;ACAO,MAAM,4CAA8B;;;;ACG3C,MAAM,6CAAuB,IAAM,SAAS,aAAa,CAAC,CAAA,GAAA,yCAA0B;AACpF,MAAM,yCAAmB,IAAM,6CAAuB,UAAU,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE;AACtF,MAAM,iDAA2B,IAAM,6CAAuB,UAAU,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE;AAC5F,MAAM,wCAAkB,IAAM,6CAAuB,UAAU,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE;AAErF,IAAI,sCAAgB;AACpB,MAAM,0CAAmB,CAAC;AAC1B,MAAM,oCAAc;IAChB,WAAW;IACX,cAAc;AAClB;AAEA,MAAM,mCAAa,CAAC;IAChB,MAAM,gBAAgB;IACtB,cAAc,gBAAgB,CAAC,QAAQ,OAAO,CAAC,CAAA;QAC3C,IAAI,CAAC,KAAK,YAAY,CAAC,oBAAoB;YACvC,KAAK,YAAY,CAAC,mBAAmB;YACrC,KAAK,YAAY,CAAC,sBAAsB,OAAO,kCAAY,YAAY;QAC3E;IACJ;AACJ;AAEA,MAAM,mCAAa;IACf,MAAM,gBAAgB;IACtB,cAAc,gBAAgB,CAAC,QAAQ,OAAO,CAAC,CAAA;QAC3C,MAAM,YAAY,KAAK,YAAY,CAAC;QACpC,MAAM,eAAe,KAAK,YAAY,CAAC;QACvC,IAAI,uCAAiB,CAAC,UAAU,EAC5B,uCAAiB,CAAC,UAAU,CAAC,aAAa,GAAG,KAAK,WAAW;aAC1D;YACH,uCAAiB,CAAC,UAAU,GAAG,EAAE;YACjC,uCAAiB,CAAC,UAAU,CAAC,aAAa,GAAG,KAAK,WAAW;QACjE;IACJ;AACJ;AACA,MAAM,+CAAyB,CAAC;IAC5B,MAAM,QAAQ,uCAAiB,CAAC,UAAU,CAAC,IAAI,CAAC;IAChD,MAAM,QAAQ,AAAC,iDAA+C,gBAAgB,CAAC;IAC/E,QAAQ,GAAG,CAAC,gBAAgB,MAAM,MAAM;IACxC,QAAQ,IAAI,CAAC,kBAAkB;IAC/B,OAAO;AACX;AAEA,MAAM,yCAAmB,CAAC;IACtB,QAAQ,IAAI,CAAC;IACb,MAAM,eAAe;IACrB,MAAM,mBAAmB,6CAAuB;IAChD,sCAAgB;IAEhB,IAAI,CAAC,cACD;IAGJ,IAAI,kBAAkB;QAClB,kCAAY,SAAS,GAAG,OAAO,IAAI,OAAO,OAAO,KAAK,mBAAmB;QACzE,kCAAY,YAAY,GAAG,GAAG,sBAAsB;QACpD,uCAAiB,CAAC,kCAAY,SAAS,CAAC,GAAG,EAAE;IACjD;IAEA,iCAAW,kCAAY,SAAS;IAChC;IAEA,SAAS;QACL,SAAS,kCAAY,SAAS;QAC9B,eAAe;QACf,aAAa,6CAAuB,kCAAY,SAAS;IAC7D;AAAE;IAEN,2CAAe;;;AFnDf;;;CAGC,GACD,MAAM,yCAAmB,CAAC;IACtB,MAAM,gBAAgB,SAAS,aAAa,CAAC,CAAA,GAAA,yCAA0B;IACvE,IAAI,eAAe;QACf,MAAM,WAAW,IAAI,iBAAiB;YAClC,QAAQ,GAAG,CAAC;YACZ,CAAA,GAAA,wCAAe,EAAE;QACrB;QACA,SAAS,OAAO,CAAC,eAAe;YAC5B,WAAW;YACX,SAAS;YACT,eAAe;QACnB;IACJ,OACI,WAAW;QAAO,uCAAiB;IAAS,GAAG;AAEvD;AAQO,MAAM,4CAAqC,CAAC,MAAM,CAAA,GAAA,yCAA0B,CAAC,EAAE;IAClF,MAAM,mBAAmB;QACrB,OAAO,qBAAqB,CAAC;YACzB,IAAI,SAAS,UAAU,KAAK,YAAY;gBACpC,QAAQ,GAAG,CAAC;gBACZ,uCAAiB;YACrB,OACI;QAER;IACJ;IAEA;AAEJ;IAEA,2CAAe","sources":["src/index.ts","src/constant.ts","src/mutation-callback.ts"],"sourcesContent":["import {googleMeetCaptionsClassName} from './constant';\nimport mutationCallback from './mutation-callback';\n\n/**\n * Type definition for the captions receiver function.\n */\nexport interface Captions {\n    session: string;\n    activeSpeaker: string;\n    talkContent: string;\n}\nexport type captionsReceiver = (v: Captions) => void;\n/**\n * Type definition for the GetCaptionsInterface function.\n * @typedef {Function} GetCaptionsInterface\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\ntype GetCaptionsInterface = (cls: string, receiver: captionsReceiver) => void;\n\n/**\n * Waits for the target element to be available and starts observing it for mutations.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nconst waitForObserving = (receiver: captionsReceiver) => {\n    const targetElement = document.querySelector(googleMeetCaptionsClassName);\n    if (targetElement) {\n        const observer = new MutationObserver(() => {\n            console.log('mutation observed');\n            mutationCallback(receiver);\n        });\n        observer.observe(targetElement, {\n            childList: true,\n            subtree: true,\n            characterData: true\n        });\n    } else {\n        setTimeout(() => {waitForObserving(receiver)}, 1000);\n    }\n}\n\n/**\n * Type definition for the GetCaptionsInterface function.\n * @typedef {Function} GetCaptionsInterface\n * @param {string} cls - The class name to observe.\n * @param {captionsReceiver} receiver - The function to call when captions are received.\n */\nexport const getCaptions : GetCaptionsInterface = (cls = googleMeetCaptionsClassName, receiver) => {\n    const readyGetCaptions = () => {\n        window.requestAnimationFrame(() => {\n            if (document.readyState === 'complete') {\n                console.log('document complete');\n                waitForObserving(receiver);\n            } else {\n                readyGetCaptions()\n            }\n        })\n    };\n\n    readyGetCaptions();\n\n}\n\nexport default getCaptions;\n","export const googleMeetCaptionsClassName = '.uYs2ee';\r\n","import {googleMeetCaptionsClassName} from './constant';\r\nimport {captionsReceiver} from \"./index\";\r\n\r\nconst getCaptionsContainer = () => document.querySelector(googleMeetCaptionsClassName);\r\nconst getWhoIsSpeaking = () => getCaptionsContainer().childNodes?.[0]?.childNodes[0]?.textContent;\r\nconst getCaptionsTextContainer = () => getCaptionsContainer().childNodes?.[0]?.childNodes[1];\r\nconst getSpeakContent = () => getCaptionsContainer().childNodes?.[0]?.childNodes[1]?.textContent;\r\n\r\nlet whoIsSpeaking = '';\r\nconst sessionIdSpanHash= {};\r\nconst sessionInfo = {\r\n    sessionId: '',\r\n    sessionIndex: 0\r\n}\r\n\r\nconst addSpanTag = (sessionId) => {\r\n    const textContainer = getCaptionsTextContainer() as HTMLDivElement;\r\n    textContainer.querySelectorAll('span').forEach(span => {\r\n        if (!span.hasAttribute('data-session-id')) {\r\n            span.setAttribute('data-session-id', sessionId);\r\n            span.setAttribute('data-session-index', String(sessionInfo.sessionIndex++))\r\n        }\r\n    });\r\n}\r\n\r\nconst recordSpan = () => {\r\n    const textContainer = getCaptionsTextContainer() as HTMLDivElement;\r\n    textContainer.querySelectorAll('span').forEach(span => {\r\n        const sessionId = span.getAttribute('data-session-id');\r\n        const sessionIndex = span.getAttribute('data-session-index');\r\n        if (sessionIdSpanHash[sessionId]) {\r\n            sessionIdSpanHash[sessionId][sessionIndex] = span.textContent;\r\n        } else {\r\n            sessionIdSpanHash[sessionId] = [];\r\n            sessionIdSpanHash[sessionId][sessionIndex] = span.textContent;\r\n        }\r\n    });\r\n}\r\nconst getSessionSpeakContent = (sessionId) => {\r\n    const texts = sessionIdSpanHash[sessionId].join(\" \");\r\n    const spans = (getCaptionsTextContainer()  as HTMLDivElement).querySelectorAll('span');\r\n    console.log('spans length', spans.length);\r\n    console.warn('current dialog', texts);\r\n    return texts;\r\n};\r\n\r\nconst mutationCallback = (receiver: captionsReceiver) => {\r\n    console.warn('mutation observed');\r\n    const speakContent = getSpeakContent();\r\n    const isNewOneSpeaking = getWhoIsSpeaking() !== whoIsSpeaking;\r\n    whoIsSpeaking = getWhoIsSpeaking();\r\n\r\n    if (!speakContent) {\r\n        return\r\n    }\r\n\r\n    if (isNewOneSpeaking) {\r\n        sessionInfo.sessionId = String(new Date().getTime()); // reset session id\r\n        sessionInfo.sessionIndex = 0; // reset session index\r\n        sessionIdSpanHash[sessionInfo.sessionId] = [];\r\n    }\r\n\r\n    addSpanTag(sessionInfo.sessionId)\r\n    recordSpan();\r\n\r\n    receiver({\r\n        session: sessionInfo.sessionId,\r\n        activeSpeaker: whoIsSpeaking,\r\n        talkContent: getSessionSpeakContent(sessionInfo.sessionId)\r\n    })};\r\n\r\nexport default mutationCallback;\r\n"],"names":[],"version":3,"file":"main.js.map"}